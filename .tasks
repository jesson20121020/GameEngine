# vim: set fenc=utf-8 ft=dosini:

# define a new task named "file-build"
[cmake-mac]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=rm -rf build/mac && cmake -H. -B build/mac -G  "Xcode"

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1

# define a new task named "file-build"
[xcode-mac]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=open build/mac/GameEngine.xcodeproj

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1

# define a new task named "file-build"
[cmake-ios]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=rm -rf build/ios && cmake -H. -B build/ios -D PLATFORM_IOS:BOOL=ON -G  "Xcode"

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1

# define a new task named "file-build"
[xcode-ios]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=open build/ios/GameEngine.xcodeproj

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1


# define a new task named "file-build"
[cmake-windows]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=rm -rf build/windows && cmake.exe -H. -B build/windows -G  "Visual Studio 16 2019"
# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1


# define a new task named "file-build"
[build-windows]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=cmd.exe /c "F:/Programe/VisualStudio/vs2019/Common7/Tools/VsMSBuildCmd.bat && msbuild.exe GameEngine.sln "
# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)/build/windows

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1


# define a new task named "file-build"
[run-windows]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=cmd.exe /c start "client\windows\Debug\client.exe"
# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)/build/windows

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1

# define a new task named "file-build"
[build-mac]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=xcodebuild
# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)/build/mac

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1


# define a new task named "file-build"
[run-mac]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=open client/mac/Debug/game.app
# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_ROOT)/build/mac

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=1
